<div class="container app-content">
	<!--<div class="row app-header">
		<h1 class="text-center header-text">Hackathon Map</h1>
	</div> -->
	<div class="row map-row">
		<div class="col-md-12 col-sm-12 col-xs-12 map-col">

			<div id="map-canvas" class="center-block"></div>

		</div>
	</div>

	<div class="row modal-row">
		<div class="col-md-12 col-sm-12 col-xs-12 btn-col">
			<div class="btn btn-lg btn-add" data-toggle="modal" data-target="#myModal"><i class="fa fa-plus"></i> Add Your Spot</div>
		</div>
		
		<div class="col-md-12 col-sm-12 col-xs-12 modal-form">
			<!-- Modal -->
			<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
							<h4 class="modal-title" id="myModalLabel">Tell Us About Your Spot</h4>
						</div>
						<form action="<%= hack_maps_path %>" class="project_form" method="POST">
							<div class="modal-body">
								<div class="form-group">
									<input name="authenticity_token" value="<%= form_authenticity_token %>" type="hidden">
									<label for="title">Title</label>
									<input name="title" type="text" class="form-control" id="title" placeholder="Title">
								</div>
								<div class="form-group">
									<label for="description">Short Description</label>
									<textarea name="description" id="description" class="form-control" placeholder="Enter a description here..." rows="3"></textarea>
								</div>
								<div class="form-group">
									<div class="dropdown">
										<label for="tag">Select a tag</label>
										<select   id="tag" name="tag"class="form-control" aria-labelledby="dropdownMenu1">
											<option value="project">Project</option>
											<option value="event">Event</option>
											<option value="food">Food</option>									
										</ul>
									</div>
								</div>
								<input name ="latitude" type="hidden" class="form-control" id="latitude"  >
								<input name="longitude"type="hidden" class="form-control" id="longitude" >
								
							</div> <!-- end of modal body -->
							<div class="modal-footer">
								<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>


								<input type="submit" class="btn btn-green" />
							</div>
						</form>
					</div>
				</div>
			</div> <!-- end of modal -->
		</div> 
	</div> <!-- end of row -->
	
	<div class="row comments-section" id="comments-section">
		<div class="col-md-12 col-xs-12 col-sm-12 comments-col">
			<section class="comment-header">
				<h3 class="comments-header text-center">Comments:</h3>
			</section>

			<section class="user-comments">
				<ul id="comment-list">
					
				</ul>
			</section>
			
			<section class="comments-form">
				<form class="final-comments-form">
					<div class="form-group">
						<input name="authenticity_token" value="<%= form_authenticity_token %>" type="hidden">
						<label for="comment-box">Leave a comment:</label>
						<textarea name="description" id="comment-box" placeholder="Enter a description here..." rows="3" class="form-control"></textarea>
						<input name="postId" id="postId" value="" type="hidden">
					</div>
					<input type="submit" id="comment_submit" class="btn" />
				</form>
			</section>
		</div>
	</div>
</div>

<script>

var map = null;

$(function() {
  $("#comment_submit").on("click", function(event) {
    event.preventDefault();
     // $("#comment-box").append("<div id>")
    var commentItem = document.createElement("li");
	var textValue = document.createTextNode(document.getElementById('comment-box').value);
	commentItem.appendChild(textValue);
	document.getElementById('comment-list').appendChild(commentItem);
    $.ajax({
      type: "POST",
      url: "<%= comments_path %>",
      data: {
      			comment: {
      				postId: document.getElementById('postId').value,
      				description: document.getElementById('comment-box').value
      			}
  			},
      success: function(result) {
      	
        // Append the result to a table or list, $("list").append(result)
      }
    });
  });
});

function getLocation() {
	if (navigator.geolocation) {
		navigator.geolocation.getCurrentPosition(createHiddenFields, 
			function () {alert("Please enable gps")},{ maximumAge:600000, timeout:5000, enableHighAccuracy: true});
	} else { 
		alert("Geolocation is not supported by this browser.");
	}
}
function showComments(comments,id){
	comments = String(comments);
	document.getElementById('postId').value = id;

	var commentSection = document.getElementById('comments-section');
	commentSection.style.display= "block";

	var commentsArray = comments.split(',');
	for(var i =0; i<commentsArray.length; i++){
		var s = commentsArray[i];
		var commentItem = document.createElement("li");
		var textValue = document.createTextNode(s);
		commentItem.appendChild(textValue);
		console.log(s);
		document.getElementById('comment-list').appendChild(commentItem);
		var separator = document.createElement("hr");
		document.getElementById('comment-list').appendChild(separator);
	}

	$('html,body').animate({
        scrollTop: $(".comments-section").offset().top},
        'slow');
}
function createHiddenFields(position){

	lat = position.coords.latitude
	lon = position.coords.longitude

	document.getElementById('latitude').value = lat;
	document.getElementById('longitude').value = lon;

	var mapCanvas = document.getElementById('map-canvas');
	var bounds = new google.maps.LatLngBounds();
	console.log(lat, lon);
	var mapOptions = {
		center: new google.maps.LatLng(lat , lon),
		zoom: 17,
		mapTypeId: google.maps.MapTypeId.ROADMAP
	}
	/* create map here */
	map = new google.maps.Map(mapCanvas, mapOptions);

	/* function fired after modal form is submitted */
	function addMarker(map) {
		console.log("the addMarker method is executed");

		// adding Multiple Markers from ruby object
		var markers = [
		<% @posts.each do |post| %>
		<% if post.equal? @posts.last %>
		['<%= post.title %>', '<%= post.latitude %>', '<%= post.longitude %>']
		<% else %>
		['<%= post.title %>', '<%= post.latitude %>', '<%= post.longitude %>'],
		<% end %>	
		<% end %>
		];

		// adding Info Window Content
		var infoWindowContent = [

			<% @posts.each do |post| %>
			  	<% if post.equal? @posts.last %>
					['<div class="info_content" >' +
					 '<h3><%= post.title %></h3>' + '<hr>' +
					 '<p><%= post.description %></p>' + '</br>' +
					 '<a href="#" class="scroll_comments" onclick="showComments(<%= post.comments.to_s %> , &quot;<%= post.id %>&quot; )">Show Comments</a>' +					 
					 '</div>']
			    <% else %>
					['<div class="info_content" >' +
					 '<h3><%= post.title %></h3>' + '<hr>' +
					 '<p><%= post.description %></p>' + '</br>' +
					 '<a href="#" class="scroll_comments" onclick="showComments(<%= post.comments.to_s %> , &quot;<%= post.id %>&quot;)">Show Comments</a>' +
					 '</div>'],
			    <% end %>
			<% end %>
		];
	
		// Display multiple markers on a map
		var infoWindow = new google.maps.InfoWindow(), marker, i;
	
		for(i = 0; i < markers.length; i++) {
			var position = new google.maps.LatLng(markers[i][1], markers[i][2]);
			console.log("position1: " + position);
			bounds.extend(position);
			marker = new google.maps.Marker({
				position: position,
				map: map,
				title: markers[i][0],
				draggable: true,
				animation: google.maps.Animation.DROP
			});
			/*marker.setMap(map);*/

			// Allow each marker to have an info window
			google.maps.event.addListener(marker, 'click', (function(marker, i) {
				return function() {
					infoWindow.setContent(infoWindowContent[i][0]);
					infoWindow.open(map, marker);
				}
			})(marker, i));
			// google.maps.event.addListener(marker, 'mo', (function(marker, i) {
			// 	return function() {
			// 		infoWindow.setContent(infoWindowContent[i][0]);
			// 		infoWindow.close(map, marker);
			// 	}
			// })(marker, i));
			// google.maps.event.addListener(marker, 'click', function(marker, i){
			// 	displayComments(i)
			// })
			// Automatically center the map fittting all markers on the screen
			map.fitBounds(bounds);

		}


		// Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
		var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
			this.setZoom(14);
			google.maps.event.removeListener(boundsListener);
		});
	}

	addMarker(map);

}

function initialize() {
	getLocation();

}
google.maps.event.addDomListener(window, 'load', initialize);

</script>